<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AvailableCharacters" xml:space="preserve">
    <value>Available heroes</value>
  </data>
  <data name="CancelRegistration" xml:space="preserve">
    <value>Cancel registration</value>
  </data>
  <data name="GameCancelled" xml:space="preserve">
    <value>The game has been cancelled</value>
  </data>
  <data name="GameDoesNotExist" xml:space="preserve">
    <value>The game doesn't exist anymore</value>
  </data>
  <data name="GameHasAlreadyStarted" xml:space="preserve">
    <value>The game has already started</value>
  </data>
  <data name="GameInvitaion" xml:space="preserve">
    <value>Let's play Citadels</value>
  </data>
  <data name="GameLinkText" xml:space="preserve">
    <value>Click to join the game</value>
  </data>
  <data name="Rules" xml:space="preserve">
    <value>Rules</value>
  </data>
  <data name="RulesLink" xml:space="preserve">
    <value>https://images.zmangames.com/filer_public/d3/b0/d3b00592-62fa-409a-b5c6-3364e972955f/wr01_citadels_classic_rules.pdf</value>
  </data>
  <data name="Speaking" xml:space="preserve">
    <value>is speaking</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="StartNewGame" xml:space="preserve">
    <value>Start new game</value>
  </data>
  <data name="UnavailableCharacters" xml:space="preserve">
    <value>Discarded heroes</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to the game</value>
  </data>
  <data name="CharacterName1" xml:space="preserve">
    <value>Assasin</value>
  </data>
  <data name="CharacterDescription1" xml:space="preserve">
    <value>Call the name of another character whom you wish to kill. When the killed character is called, he must remain silent and skip his entire turn</value>
  </data>
  <data name="CharacterName2" xml:space="preserve">
    <value>Thief</value>
  </data>
  <data name="CharacterDescription2" xml:space="preserve">
    <value>Call the name of another character whom you wish to rob. When a player reveals that character, you immediately take all of his gold</value>
  </data>
  <data name="CharacterName3" xml:space="preserve">
    <value>Magician</value>
  </data>
  <data name="CharacterDescription3" xml:space="preserve">
    <value>Exchange your entire hand of cards with another playerâ€™s hand of cards OR discard any number of cards to gain an equal number of cards from the district deck</value>
  </data>
  <data name="CharacterName4" xml:space="preserve">
    <value>King</value>
  </data>
  <data name="CharacterDescription4" xml:space="preserve">
    <value>You gain one gold for each noble district in your city. At some point during your turn, you must take the crown</value>
  </data>
  <data name="CharacterName5" xml:space="preserve">
    <value>Bishop</value>
  </data>
  <data name="CharacterDescription5" xml:space="preserve">
    <value>You gain one gold for each religious district in your city. During this round, the Warlord cannot destroy your districts</value>
  </data>
  <data name="CharacterName6" xml:space="preserve">
    <value>Merchant</value>
  </data>
  <data name="CharacterDescription6" xml:space="preserve">
    <value>You gain one gold for each trade district in your city. You gain one extra gold</value>
  </data>
  <data name="CharacterName7" xml:space="preserve">
    <value>Architect</value>
  </data>
  <data name="CharacterDescription7" xml:space="preserve">
    <value>Gain two extra cards. You can build up to three districts</value>
  </data>
  <data name="CharacterName8" xml:space="preserve">
    <value>Warlord</value>
  </data>
  <data name="CharacterDescription8" xml:space="preserve">
    <value>You gain one gold for each military district in your city. You can destroy one district of your choice by paying one fewer gold than its building cost</value>
  </data>
  <data name="DraftEnded" xml:space="preserve">
    <value>Draft has been finished</value>
  </data>
  <data name="DraftStarted" xml:space="preserve">
    <value>Draft has been started</value>
  </data>
  <data name="OnlyHostCanStart" xml:space="preserve">
    <value>Only host can start the game</value>
  </data>
  <data name="ChoosingCharacter" xml:space="preserve">
    <value>{0} is choosing a hero</value>
  </data>
  <data name="GatherCoins" xml:space="preserve">
    <value>Take 2 coins</value>
  </data>
  <data name="GatherDistrict" xml:space="preserve">
    <value>Take a district</value>
  </data>
  <data name="CancelGame" xml:space="preserve">
    <value>Cancel the game</value>
  </data>
</root>